{
  "_from": "env-cmd",
  "_id": "env-cmd@10.0.1",
  "_inBundle": false,
  "_integrity": "sha512-vaV0BRwj+6+fd8NmcvSoRhrTxQl07fS3jxIdPYe7d+NlJj4hV/FSMmWcKau/qpbe5jeFdDI757//ToJW70ad2Q==",
  "_location": "/env-cmd",
  "_phantomChildren": {
    "nice-try": "1.0.5",
    "path-key": "2.0.1",
    "semver": "5.7.1",
    "shebang-command": "1.2.0",
    "which": "1.3.1"
  },
  "_requested": {
    "escapedName": "env-cmd",
    "fetchSpec": "latest",
    "name": "env-cmd",
    "raw": "env-cmd",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/env-cmd/-/env-cmd-10.0.1.tgz",
  "_shasum": "bcaedad78a0172c62113890dd4efec36d2ba0775",
  "_shrinkwrap": null,
  "_spec": "env-cmd",
  "_where": "/home/kiril/node-ethfund",
  "author": {
    "name": "Todd Bluhm"
  },
  "bin": {
    "env-cmd": "bin/env-cmd.js"
  },
  "bugs": {
    "url": "https://github.com/toddbluhm/env-cmd/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Eric Lanehart",
      "email": "eric@pushred.co"
    },
    {
      "name": "Jon Scheiding",
      "email": "jonscheiding@gmail.com"
    },
    {
      "name": "serapath",
      "email": "dev@serapath.de",
      "url": "Alexander Praetorius"
    },
    {
      "name": "Anton Versal",
      "email": "ant.ver@gmail.com"
    }
  ],
  "dependencies": {
    "commander": "^3.0.0",
    "cross-spawn": "^6.0.0"
  },
  "deprecated": false,
  "description": "Executes a command using the environment variables in an env file",
  "devDependencies": {
    "@types/chai": "^4.0.0",
    "@types/cross-spawn": "^6.0.0",
    "@types/mocha": "^5.0.0",
    "@types/node": "^12.0.0",
    "@types/sinon": "^7.0.0",
    "chai": "^4.0.0",
    "coveralls": "^3.0.0",
    "mocha": "^6.0.0",
    "nyc": "^14.0.0",
    "sinon": "^7.0.0",
    "ts-node": "^8.0.0",
    "ts-standard": "^1.0.0",
    "typescript": "^3.0.0"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "homepage": "https://github.com/toddbluhm/env-cmd#readme",
  "keywords": [
    "cli",
    "cmd",
    "command",
    "config",
    "env",
    "environment",
    "execute",
    "file",
    "run",
    "variables"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "env-cmd",
  "nyc": {
    "extension": [
      ".ts"
    ],
    "include": [
      "src/**/*.ts"
    ],
    "instrument": true,
    "reporter": [
      "html",
      "text-summary"
    ],
    "require": [
      "ts-node/register"
    ],
    "sourceMap": true
  },
  "optionalDependencies": {},
  "readme": "[![Travis](https://travis-ci.org/toddbluhm/env-cmd.svg?branch=master)](https://travis-ci.org/toddbluhm/env-cmd)\n[![Coverage Status](https://coveralls.io/repos/github/toddbluhm/env-cmd/badge.svg?branch=master)](https://coveralls.io/github/toddbluhm/env-cmd?branch=master)\n[![npm](https://img.shields.io/npm/v/env-cmd.svg?maxAge=86400)](https://www.npmjs.com/package/env-cmd)\n[![npm](https://img.shields.io/npm/dm/env-cmd.svg?maxAge=86400)](https://www.npmjs.com/package/env-cmd)\n[![npm](https://img.shields.io/npm/l/env-cmd.svg?maxAge=2592000)](https://www.npmjs.com/package/env-cmd)\n[![TS-Standard - Typescript Standard Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/toddbluhm/ts-standard)\n[![Greenkeeper badge](https://badges.greenkeeper.io/toddbluhm/env-cmd.svg)](https://greenkeeper.io/)\n\n# env-cmd\n\nA simple node program for executing commands using an environment from an env file.\n\n## Install\n\n`npm install env-cmd` or `npm install -g env-cmd`\n\n## Basic Usage\n\n**Environment file `./.env`**\n\n```text\n# This is a comment\nENV1=THANKS\nENV2=FOR ALL\nENV3=THE FISH\n```\n\n**Package.json**\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"env-cmd mocha -R spec\"\n  }\n}\n```\n\n**Terminal**\n\n```sh\n./node_modules/.bin/env-cmd node index.js\n```\n\n## Using custom env file path\n\nTo use a custom env filename or path, pass the `-f` flag. This is a major breaking change from prior versions < 9.0.0\n\n**Terminal**\n\n```sh\n./node_modules/.bin/env-cmd -f ./custom/path/.env node index.js\n```\n\n## ðŸ“œ Help\n\n```text\nUsage: _ [options] <command> [...args]\n\nOptions:\n  -v, --version                       output the version number\n  -f, --file [path]                   Custom env file path (default path: ./.env)\n  -r, --rc-file [path]                Custom rc file path (default path: ./.env-cmdrc(|.js|.json)\n  -e, --environments [env1,env2,...]  The rc file environment(s) to use\n  --fallback                          Fallback to default env file path, if custom env file path not found\n  --no-override                       Do not override existing environment variables\n  --use-shell                         Execute the command in a new shell with the given environment\n  -h, --help                          output usage information\n```\n\n## ðŸ”¬ Advanced Usage\n\n### `.rc` file usage\n\nFor more complex projects, a `.env-cmdrc` file can be defined in the root directory and supports\nas many environments as you want. Simply use the `-e` flag and provide which environments you wish to\nuse from the `.env-cmdrc` file. Using multiple environment names will merge the environment variables\ntogether. Later environments overwrite earlier ones in the list if conflicting environment variables\nare found.\n\n**.rc file `./.env-cmdrc`**\n\n```json\n{\n  \"development\": {\n    \"ENV1\": \"Thanks\",\n    \"ENV2\": \"For All\"\n  },\n  \"test\": {\n    \"ENV1\": \"No Thanks\",\n    \"ENV3\": \"!\"\n  },\n  \"production\": {\n    \"ENV1\": \"The Fish\"\n  }\n}\n```\n\n**Terminal**\n\n```sh\n./node_modules/.bin/env-cmd -e production node index.js\n# Or for multiple environments (where `production` vars override `test` vars,\n# but both are included)\n./node_modules/.bin/env-cmd -e test,production node index.js\n```\n\n### `--no-override` option\n\nPrevents overriding of existing environment variables on `process.env` and within the current\nenvironment.\n\n### `--fallback` file usage option\n\nIf the `.env` file does not exist at the provieded custom path, then use the default\nfallback location `./.env` env file instead.\n\n### `--use-shell`\n\nExecutes the command within a new shell environment. This is useful if you want to string multiple\ncommands together that share the same environment variables.\n\n**Terminal**\n\n```sh\n./node_modules/.bin/env-cmd -f ./test/.env --use-shell \"npm run lint && npm test\"\n```\n\n### Asynchronous env file support\n\nEnvCmd supports reading from asynchronous `.env` files. Instead of using a `.env` file, pass in a `.js`\nfile that exports either an object or a `Promise` resolving to an object (`{ ENV_VAR_NAME: value, ... }`). Asynchronous `.rc`\nfiles are also supported using `.js` file extension and resolving to an object with top level environment\nnames (`{ production: { ENV_VAR_NAME: value, ... } }`).\n\n**Terminal**\n\n```sh\n./node_modules/.bin/env-cmd -f ./async-file.js node index.js\n```\n\n## Examples\n\nYou can find examples of how to use the various options above by visiting\nthe examples repo [env-cmd-examples](https://github.com/toddbluhm/env-cmd-examples).\n\n## Environment File Formats\n\nThese are the currently accepted environment file formats. If any other formats are desired please create an issue.\n\n- `.env` as `key=value`\n- `.env.json` Key/value pairs as JSON\n- `.env.js` JavaScript file exporting an `object` or a `Promise` that resolves to an `object`\n- `.env-cmdrc` as valid json or `.env-cmdrc.json` in execution directory with at least one environment `{ \"dev\": { \"key1\": \"val1\" } }`\n- `.env-cmdrc.js` JavaScript file exporting an `object` or a `Promise` that resolves to an `object` that contains at least one environment\n\n## Path Rules\n\nThis lib attempts to follow standard `bash` path rules. The rules are as followed:\n\nHome Directory = `/Users/test`\n\nWorking Directory = `/Users/test/Development/app`\n\n| Type | Input Path | Expanded Path |\n| -- | -- | ------------- |\n| Absolute | `/some/absolute/path.env` | `/some/absolute/path.env` |\n| Home Directory with `~` | `~/starts/on/homedir/path.env` | `/Users/test/starts/on/homedir/path.env` |\n| Relative | `./some/relative/path.env` or `some/relative/path.env` | `/Users/test/Development/app/some/relative/path.env` |\n| Relative with parent dir | `../some/relative/path.env` | `/Users/test/Development/some/relative/path.env` |\n\n## âš’ API Usage\n\n### `EnvCmd`\n\nA function that executes a given command in a new child process with the given environment and options\n\n- **`options`** { `object` }\n  - **`command`** { `string` }: The command to execute (`node`, `mocha`, ...)\n  - **`commandArgs`** { `string[]` }: List of arguments to pass to the `command` (`['-R', 'Spec']`)\n  - **`envFile`** { `object` }\n    - **`filePath`** { `string` }: Custom path to .env file to read from (defaults to: `./.env`)\n    - **`fallback`** { `boolean` }: Should fall back to default `./.env` file if custom path does not exist\n  - **`rc`** { `object` }\n    - **`environments`** { `string[]` }: List of environment to read from the `.rc` file\n    - **`filePath`** { `string` }: Custom path to the `.rc` file (defaults to: `./.env-cmdrc(|.js|.json)`)\n  - **`options`** { `object` }\n    - **`noOverride`** { `boolean` }: Prevent `.env` file vars from overriding existing `process.env` vars (default: `false`)\n    - **`useShell`** { `boolean` }: Runs command inside a new shell instance (default: `false`)\n  - **Returns** { `Promise<object>` }: key is env var name and value is the env var value\n\n### `GetEnvVars`\n\nA function that parses environment variables from a `.env` or a `.rc` file\n\n- **`options`** { `object` }\n  - **`envFile`** { `object` }\n    - **`filePath`** { `string` }: Custom path to .env file to read from (defaults to: `./.env`)\n    - **`fallback`** { `boolean` }: Should fall back to default `./.env` file if custom path does not exist\n  - **`rc`** { `object` }\n    - **`environments`** { `string[]` }: List of environment to read from the `.rc` file\n    - **`filePath`** { `string` }: Custom path to the `.rc` file (defaults to: `./.env-cmdrc(|.js|.json)`)\n- **Returns** { `Promise<object>` }: key is env var name and value is the env var value\n\n## Why\n\nBecause sometimes it is just too cumbersome passing a lot of environment variables to scripts. It is\nusually just easier to have a file with all the vars in them, especially for development and testing.\n\nðŸš¨**Do not commit sensitive environment data to a public git repo!** ðŸš¨\n\n## Related Projects\n\n[`cross-env`](https://github.com/kentcdodds/cross-env) - Cross platform setting of environment scripts\n\n## ðŸŽŠ Special Thanks\n\nSpecial thanks to [`cross-env`](https://github.com/kentcdodds/cross-env) for inspiration (uses the\nsame `cross-spawn` lib underneath too).\n\n## ðŸŽ‰ Contributors\n\n- Eric Lanehart\n- Jon Scheiding\n- Alexander Praetorius\n- Anton Versal\n\n## ðŸ“‹ Contributing Guide\n\nI welcome all pull requests. Please make sure you add appropriate test cases for any features\nadded. Before opening a PR please make sure to run the following scripts:\n\n- `npm run lint` checks for code errors and format according to [js-standard](https://github.com/feross/standard)\n- `npm test` make sure all tests pass\n- `npm run test-cover` make sure the coverage has not decreased from current master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/toddbluhm/env-cmd.git"
  },
  "scripts": {
    "build": "tsc",
    "coveralls": "coveralls < coverage/lcov.info",
    "lint": "ts-standard --fix && tsc --noEmit",
    "test": "mocha -r ts-node/register ./test/**/*.ts",
    "test-cover": "nyc --reporter=lcov --reporter=text npm test",
    "watch": "tsc -w"
  },
  "ts-standard": {
    "ignore": [
      "dist"
    ],
    "project": "./tsconfig.eslint.json"
  },
  "types": "dist/index.d.ts",
  "version": "10.0.1"
}
